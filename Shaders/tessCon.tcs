// first step of tesselation shader
// tesselation control shader add/deletes control points and determines the tesselatation level
// patch has three control points here (three vertices for each triangle)


#version 450 core
layout (vertices =3) out;
 float GetTessLevel ( float dist0, float dist1);

// vectors stored as arrays - each patch has three vertices, each with an xyz pos and xyz norm value 
//posVS = position from Vertex Shader, posTC = position from this Tesselation Control shader

in vec3 FragPos[] ;
in vec2 TexCoords[] ;

uniform vec3 viewPos;

out vec3 posTC[] ;
out vec2 texCoordsTC[] ;


void main()
{

   posTC[gl_InvocationID]  = FragPos[gl_InvocationID] ;
   texCoordsTC[gl_InvocationID] = TexCoords[gl_InvocationID] ;

  // tesselation level; we will find this automatically later but for now hardcoded value
   float tessLevel = 13.5;

   // gpu can calculate each control point in parallel
   // tesselation level same for entire patch so only need to set it once (for the first control point)
   // gl_invocation called for each control point
   if (gl_InvocationID==0)
   {
           
            //Work out distance from eye (camera) to vertex zero
            //We get three floats representing the distance from
           float eyeToVertexDist0 = distance(viewPos, posTC[0]);
           float eyeToVertexDist1 = distance(viewPos, posTC[1]);
           float eyeToVertexDist2 = distance(viewPos, posTC[2]);
		   // Calculate the tessellation levels
           // We calculate the tessallation levels between vertex
          

          gl_TessLevelOuter[0] = GetTessLevel(eyeToVertexDist1, eyeToVertexDist2);
          gl_TessLevelOuter[1] = GetTessLevel(eyeToVertexDist2, eyeToVertexDist0) ; 
          gl_TessLevelOuter[2] = GetTessLevel(eyeToVertexDist0, eyeToVertexDist1) ;
          // Take the inner tess and tessalltion level to be equal  
          gl_TessLevelInner[0] =  gl_TessLevelOuter[2] ; 
          

   }

   // pass through position and normal information
  

}

 float GetTessLevel ( float dist0, float dist1)
           {
          
               
                float AvgDist  = (dist0 + dist1) / 2; //average distance
                if (AvgDist < 100)
                    return 10;
                else if (AvgDist < 200)
                    return 8;
                else if (AvgDist < 300)
                    return 5;
                else if (AvgDist < 400)
                    return 3;
                else 
                    return 1;
                
                
           }