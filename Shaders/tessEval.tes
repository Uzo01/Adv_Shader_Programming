#version 450 core 

layout (triangles, fractional_odd_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;


// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform float scale;

// read in vector arrays from previous shader
in vec3 posTC[] ;
in vec2 texCoordsTC[] ;

// pass along the interpolated values
out vec2 TexCoordsES ;
out vec3 posES ;
out vec3 normES;
uniform sampler2D heightMap;
uniform sampler2D groundTexdDiff;


void main()
{
    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates

   
   posES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   TexCoordsES = interpolate2D(texCoordsTC[0], texCoordsTC[1], texCoordsTC[2]) ;
   // transform vertex to clip space  - NOTE: WE NEED TO DO IT HERE NOW and not in vertex shader
   gl_Position = vec4(posES, 1.0);
   
   //Texture
   float height = texture(heightMap, TexCoordsES).x; // Height sampled from heightMap
   posES.y = height * scale;
   //TexCoordsES.y = height * scale;
  //Transformation to clip space
   gl_Position = projection * view  *vec4(posES, 1.0);
   float right = (textureOffset(heightMap, TexCoordsES, ivec2(1, 0)).r)*scale;
   float left = (textureOffset(heightMap, TexCoordsES, ivec2(-1, 0)).r)*scale;
   float up = (textureOffset(heightMap, TexCoordsES, ivec2(0, 1)).b)*scale;
   float down = (textureOffset(heightMap, TexCoordsES, ivec2(0, -1)).b)*scale;
   float lr = left - right;
   float du = up - down;
   normES = normalize(vec3(lr,2.0,du));
   
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}
